OBJECT Table 82100 WaldoNavPad Blobstore
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=Yes }
    { 10  ;   ;Record ID           ;RecordID       }
    { 20  ;   ;Blob                ;BLOB           }
    { 100 ;   ;TableNo             ;Integer        }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 82101 WaldoNAVPad Textstore
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No            ;Integer       ;AutoIncrement=Yes }
    { 10  ;   ;Record ID           ;RecordID       }
    { 20  ;   ;Textline            ;Text80         }
    { 30  ;   ;Separator           ;Option        ;OptionString=[ ,Space,Carriage Return] }
    { 100 ;   ;TableNo             ;Integer        }
  }
  KEYS
  {
    {    ;Entry No                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 82110 WaldoNAVPad Text Buffer
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Line No.            ;Integer        }
    { 10  ;   ;Textline            ;Text250        }
    { 20  ;   ;Separator           ;Option        ;OptionString=[ ,Space,Carriage Return] }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 82100 WaldoNAVPad Class
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=14:38:36;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CurrentRecRef@1100084000 : RecordRef;
      WaldoNAVPadTextClass@1000 : Codeunit 82110;
      IsInitialized@1100084001 : Boolean;
      NotInitialized@1100084002 : TextConst 'ENU=Record not initialized.  Please review your code!';
      IsTextLoaded@1001 : Boolean;
      NoTextWasLoaded@1002 : TextConst 'ENU=No text was loaded.';

    PROCEDURE Initialize@1100084000(RecVariant@1100084000 : Variant);
    VAR
      DataTypeManagement@1100084001 : Codeunit 701;
    BEGIN
      IsInitialized := DataTypeManagement.GetRecordRef(RecVariant, CurrentRecRef);
      CLEAR(WaldoNAVPadTextClass);
      IsTextLoaded := FALSE;
    END;

    PROCEDURE ShowAndSaveTexts@1100084004(Editable@1100084000 : Boolean;UseHTMLEditor@1100084002 : Boolean);
    VAR
      WaldoNAVPadShowTextsMeth@1100084001 : Codeunit 82101;
    BEGIN
      IF NOT IsInitialized THEN ERROR(NotInitialized);

      LoadTextFromDialog(Editable,UseHTMLEditor);
      IF Editable THEN
        SaveText;
    END;

    PROCEDURE LoadTextFromDialog@1(Editable@1002 : Boolean;UseHTMLEditor@1001 : Boolean) : Boolean;
    VAR
      WaldoNAVPadShowTextsMeth@1000 : Codeunit 82101;
    BEGIN
      IF NOT IsInitialized THEN ERROR(NotInitialized);

      WaldoNAVPadShowTextsMeth.ShowTexts(Editable,UseHTMLEditor,CurrentRecRef,WaldoNAVPadTextClass);
      IsTextLoaded := TRUE;
    END;

    PROCEDURE SaveText@9();
    VAR
      WaldoNAVPadSaveTextsMeth@1000 : Codeunit 82102;
    BEGIN
      IF NOT IsInitialized THEN ERROR(NotInitialized);
      IF NOT IsTextLoaded THEN ERROR(NoTextWasLoaded);

      WaldoNAVPadSaveTextsMeth.SaveTexts(WaldoNAVPadTextClass,CurrentRecRef);
    END;

    PROCEDURE HasSavedTexts@1100084001(VAR TableNo@1100084001 : Integer) : Boolean;
    VAR
      WaldoNAVPadTableHasTextMeth@1100084000 : Codeunit 82103;
    BEGIN
      EXIT(WaldoNAVPadTableHasTextMeth.TableHasTexts(TableNo));
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82101 WaldoNAVPad ShowTexts Meth
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=14:48:02;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ShowTexts@1100084000(Editable@1100084000 : Boolean;UseHTMLEditor@1100084001 : Boolean;VAR RecRef@1100084002 : RecordRef;VAR ReturnWaldoNAVPadTextClass@1000 : Codeunit 82110);
    VAR
      Handled@1100084003 : Boolean;
    BEGIN
      OnBeforeShowTexts(RecRef,Handled);
      DoShowTexts(Editable,UseHTMLEditor,RecRef,ReturnWaldoNAVPadTextClass,Handled);
      OnAfterShowTexts(RecRef);
    END;

    LOCAL PROCEDURE DoShowTexts@1100084002(Editable@1100084000 : Boolean;UseHTMLEditor@1100084007 : Boolean;VAR RecRef@1100084001 : RecordRef;VAR ReturnWaldoNAVPadTextClass@1000 : Codeunit 82110;Handled@1100084003 : Boolean);
    VAR
      WaldoNAVPadTextstore@1100084002 : Record 82101;
      TextFromBlob@1100084004 : Text;
      UpdatedText@1100084005 : Text;
    BEGIN
      IF Handled THEN EXIT;

      TextFromBlob := GetTextFromWNPBlob(RecRef);

      LoadTextfromDialog(TextFromBlob,Editable,UseHTMLEditor,ReturnWaldoNAVPadTextClass);
    END;

    LOCAL PROCEDURE GetTextFromWNPBlob@1100084053(VAR RecRef@1100084000 : RecordRef) : Text;
    VAR
      TempBlob@1100084001 : Record 99008535;
      WaldoNavPadBlobstore@1100084003 : Record 82100;
    BEGIN
      WITH WaldoNavPadBlobstore DO BEGIN
        SETRANGE("Record ID", RecRef.RECORDID);
        IF NOT FINDFIRST THEN EXIT('');
        IF NOT Blob.HASVALUE THEN EXIT('');

        CALCFIELDS(Blob);
        TempBlob.Blob := Blob;

        EXIT(GetTextFromBlob(TempBlob));
      END;
    END;

    LOCAL PROCEDURE LoadTextfromDialog@1100084001(VAR TextFromBlob@1100084002 : Text;Editable@1100084003 : Boolean;UseHTMLEditor@1100084004 : Boolean;VAR ResultWaldoNAVPadTextClass@1100084000 : Codeunit 82110);
    VAR
      WaldoNAVPadTextstore@1100084001 : Record 82101;
    BEGIN
      WITH ResultWaldoNAVPadTextClass DO BEGIN
        Initialize(TextFromBlob, MAXSTRLEN(WaldoNAVPadTextstore.Textline));
        LoadTextFromDialog(Editable,UseHTMLEditor);
      END;
    END;

    LOCAL PROCEDURE GetTextFromBlob@1100084047(VAR TempBlob@1100084000 : Record 99008535) : Text;
    VAR
      ReadStream@1100084002 : InStream;
      TextBigText@1100084003 : BigText;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(ReadStream);
      TextBigText.READ(ReadStream);
      EXIT(FORMAT(TextBigText));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowTexts@1100084004(VAR RecRef@1100084002 : RecordRef;VAR Handled@1100084000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterShowTexts@1100084008(VAR RecRef@1100084001 : RecordRef);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82102 WaldoNAVPad SaveTexts Meth
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=14:48:46;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SaveTexts@1(VAR WaldoNAVPadTextClass@1001 : Codeunit 82110;VAR RecRef@1003 : RecordRef);
    VAR
      Handled@1000 : Boolean;
    BEGIN
      OnBeforeSaveTexts(Handled);

      DoSaveTexts(WaldoNAVPadTextClass,RecRef,Handled);

      OnAfterSaveTexts();
    END;

    LOCAL PROCEDURE DoSaveTexts@2(VAR WaldoNAVPadTextClass@1005 : Codeunit 82110;VAR RecRef@1004 : RecordRef;VAR Handled@1000 : Boolean);
    VAR
      OldBlobText@1003 : Text;
    BEGIN
      IF Handled THEN EXIT;

      IF NOT WaldoNAVPadTextClass.GetTextIsUpdated THEN EXIT;

      UpdateTextForRecord(WaldoNAVPadTextClass,RecRef);
    END;

    LOCAL PROCEDURE UpdateTextForRecord@1100084012(VAR WaldoNAVPadTextClass@1100084002 : Codeunit 82110;VAR RecRef@1100084003 : RecordRef);
    BEGIN
      SaveTextToBlob(WaldoNAVPadTextClass.GetHTML,RecRef);;
      SaveTextToRecords(WaldoNAVPadTextClass,RecRef);
    END;

    LOCAL PROCEDURE FilterWNPTexts@1100084005(VAR WaldoNAVPadTextstore@1100084002 : Record 82101;VAR RecRef@1100084001 : RecordRef);
    BEGIN
      WITH WaldoNAVPadTextstore DO BEGIN
        SETRANGE("Record ID", RecRef.RECORDID);
      END;
    END;

    LOCAL PROCEDURE SaveTextToBlob@1100084024(Text@1100084002 : Text;VAR RecRef@1100084000 : RecordRef);
    BEGIN
      DeleteWNPBlobForRecord(RecRef);
      InsertWPNBlobForRecord(Text,RecRef);
    END;

    LOCAL PROCEDURE DeleteWNPBlobForRecord@1100084019(VAR RecRef@1100084000 : RecordRef);
    VAR
      WaldoNavPadBlobstore@1100084001 : Record 82100;
    BEGIN
      WITH WaldoNavPadBlobstore DO BEGIN
        SETRANGE("Record ID", RecRef.RECORDID);
        DELETEALL(FALSE);
      END;
    END;

    LOCAL PROCEDURE InsertWPNBlobForRecord@1100084018(VAR Text@1100084001 : Text;VAR RecRef@1100084000 : RecordRef);
    VAR
      WaldoNavPadBlobstore@1100084004 : Record 82100;
      TempBlob@1100084002 : Record 99008535;
    BEGIN
      WITH WaldoNavPadBlobstore DO BEGIN
        GetBlobFromText(Text,TempBlob);
        INIT;
        "Record ID" := RecRef.RECORDID;
        Blob := TempBlob.Blob;
        TableNo := RecRef.NUMBER;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SaveTextToRecords@1100084025(VAR WaldoNAVPadTextClass@1100084003 : Codeunit 82110;VAR RecRef@1100084000 : RecordRef);
    BEGIN
      DeleteWNPTextForRecord(RecRef);
      InsertWPNTextForRecord(WaldoNAVPadTextClass,RecRef);
    END;

    LOCAL PROCEDURE DeleteWNPTextForRecord@1100084003(VAR RecRef@1100084000 : RecordRef);
    VAR
      WaldoNAVPadTextstore@1100084001 : Record 82101;
    BEGIN
      FilterWNPTexts(WaldoNAVPadTextstore, RecRef);
      WaldoNAVPadTextstore.DELETEALL(FALSE);
    END;

    LOCAL PROCEDURE InsertWPNTextForRecord@1100084016(VAR WaldoNAVPadTextClass@1100084002 : Codeunit 82110;VAR RecRef@1100084000 : RecordRef);
    BEGIN
      WITH WaldoNAVPadTextClass DO BEGIN
        IF FINDFIRST THEN
          REPEAT
            InsertWPNText(GetCurrentTextLine, RecRef);
          UNTIL NEXT < 1;
      END;
    END;

    LOCAL PROCEDURE InsertWPNText@1100084020(pTextline@1100084000 : Text;VAR RecRef@1100084002 : RecordRef);
    VAR
      WaldoNAVPadTextstore@1100084001 : Record 82101;
    BEGIN
      WITH WaldoNAVPadTextstore DO BEGIN
        INIT;

        Textline := pTextline;
        "Record ID" := RecRef.RECORDID;
        TableNo := RecRef.NUMBER;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetBlobFromText@1100084010(Text@1100084001 : Text;VAR TempBlob@1100084000 : Record 99008535);
    VAR
      WriteStream@1100084002 : OutStream;
      TextBigText@1100084003 : BigText;
    BEGIN
      TempBlob.Blob.CREATEOUTSTREAM(WriteStream);
      TextBigText.ADDTEXT(Text);
      TextBigText.WRITE(WriteStream);
    END;

    LOCAL PROCEDURE OnBeforeSaveTexts@5(VAR Handled@1000 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE OnAfterSaveTexts@6();
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82103 WaldoNAVPad TableHasText Meth
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE TableHasTexts@1100084000(TableNo@1100084002 : Integer) ResultHasTexts : Boolean;
    VAR
      Handled@1100084003 : Boolean;
    BEGIN
      OnBeforeTableHasTexts(TableNo,ResultHasTexts,Handled);
      ResultHasTexts := DoTableHasTexts(TableNo,Handled);
      OnAfterTableHasTexts(TableNo);
    END;

    LOCAL PROCEDURE DoTableHasTexts@1100084002(VAR TableNo@1100084000 : Integer;Handled@1100084003 : Boolean) : Boolean;
    BEGIN
      IF Handled THEN EXIT;

      EXIT(HasTextsForRecRef(TableNo));
    END;

    LOCAL PROCEDURE HasTextsForRecRef@1100084001(VAR pTableNo@1100084002 : Integer) : Boolean;
    VAR
      WaldoNavPadBlobstore@1100084001 : Record 82100;
    BEGIN
      WITH WaldoNavPadBlobstore DO BEGIN
        SETRANGE(TableNo, pTableNo);
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE "--- Event Wrapper"@1100084015();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTableHasTexts@1100084004(VAR TableNo@1100084003 : Integer;VAR ResultHasTexts@1100084001 : Boolean;VAR Handled@1100084000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTableHasTexts@1100084008(VAR TableNo@1100084000 : Integer);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82109 WaldoNAVPad Subscribers
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,1,OnAfterGetDatabaseTableTriggerSetup,"",Error,Error)]
    LOCAL PROCEDURE SetUpWaldoNAVPad_OnAfterGetDatabaseTableTriggerSetup@1100084000(TableId@1100084000 : Integer;VAR OnDatabaseInsert@1100084001 : Boolean;VAR OnDatabaseModify@1100084002 : Boolean;VAR OnDatabaseDelete@1100084003 : Boolean;VAR OnDatabaseRename@1100084004 : Boolean);
    VAR
      WaldoNAVPadClass@1100084005 : Codeunit 82100;
    BEGIN
      OnDatabaseRename := TRUE;
      //making this TRUE for all tables should not be that concerning,
      //as renaming isn't something that happens too often ;-)

      //On the other hand, if we would do it like this:
      //  OnDatabaseRename := WaldoNAVPadClass.HasTexts(TableId);
      //Then it would fail for the first text we add to a table:
      //   - TriggerSetup would be false
      //   - if we add text and then rename, it wouldn't rename the text
    END;

    [EventSubscriber(Codeunit,1,OnAfterOnDatabaseRename)]
    LOCAL PROCEDURE HandleWaldoNAVPadTexts_OnAfterOnDatabaseRename@1100084003(RecRef@1100084000 : RecordRef;xRecRef@1100084001 : RecordRef);
    BEGIN
      HandleRenameRecord(RecRef,xRecRef);
    END;

    LOCAL PROCEDURE HandleRenameRecord@1100084001(VAR RecRef@1100084001 : RecordRef;VAR xRecRef@1100084000 : RecordRef);
    BEGIN
      HandleBlobStore(RecRef,xRecRef);
      HandleTextStore(RecRef,xRecRef);
    END;

    LOCAL PROCEDURE HandleBlobStore@1100084005(VAR RecRef@1100084002 : RecordRef;VAR xRecRef@1100084001 : RecordRef);
    VAR
      WaldoNavPadBlobstore@1100084000 : Record 82100;
    BEGIN
      WITH WaldoNavPadBlobstore DO BEGIN
        SETRANGE("Record ID", xRecRef.RECORDID);
        MODIFYALL("Record ID", RecRef.RECORDID,FALSE);
      END;
    END;

    LOCAL PROCEDURE HandleTextStore@1100084006(VAR RecRef@1100084002 : RecordRef;VAR xRecRef@1100084001 : RecordRef);
    VAR
      WaldoNAVPadTextstore@1100084000 : Record 82101;
    BEGIN
      WITH WaldoNAVPadTextstore DO BEGIN
        SETRANGE("Record ID", xRecRef.RECORDID);
        MODIFYALL("Record ID", RecRef.RECORDID,FALSE);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82110 WaldoNAVPad Text Class
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=14:49:49;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WaldoNAVPadTextBuffer@1100084000 : TEMPORARY Record 82110;
      MaxLenght@1100084003 : Integer;
      CurrentObjectNr@1100084001 : Integer;
      CurrentObject@1100084002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Object";
      CurrentText@1100084004 : Text;
      CurrentHTML@1100084005 : Text;
      CurrentTextIsUpdated@1000 : Boolean;

    PROCEDURE Initialize@1100084000(VAR Text@1100084000 : Text;pMaxLength@1100084001 : Integer);
    BEGIN
      SetMaxLenght(pMaxLength);
      CurrentText := Text;
      CurrentHTML := Text;
      ParseText(CurrentText);

      FINDFIRST;
    END;

    PROCEDURE Initialize2@7(VAR Text@1100084000 : Text;VAR HTML@1000 : Text;pMaxLength@1100084001 : Integer);
    BEGIN
      SetMaxLenght(pMaxLength);
      CurrentText := Text;
      CurrentHTML := HTML;
      ParseText(CurrentText);

      FINDFIRST;
    END;

    PROCEDURE LoadTextFromDialog@1100084008(Editable@1100084001 : Boolean;UseHTMLEditor@1100084002 : Boolean);
    VAR
      WaldoNAVPadShowdialogMeth@1100084000 : Codeunit 82112;
    BEGIN
      WaldoNAVPadShowdialogMeth.ShowDialog(CurrentText,CurrentHTML,CurrentTextIsUpdated,Editable,UseHTMLEditor);

      IF Editable THEN BEGIN
        ParseText(CurrentText);

      END;
    END;

    PROCEDURE GetTextIsUpdated@2() : Boolean;
    BEGIN
      EXIT(CurrentTextIsUpdated);
    END;

    PROCEDURE GetText@1100084006() : Text;
    BEGIN
      EXIT(CurrentText);
    END;

    PROCEDURE GetHTML@1() : Text;
    BEGIN
      IF CurrentHTML = '' THEN
        EXIT(CurrentText)
      ELSE
        EXIT(CurrentHTML);
    END;

    PROCEDURE SetMaxLenght@1100084007(pMaxLenght@1100084000 : Integer);
    BEGIN
      MaxLenght := pMaxLenght;
    END;

    PROCEDURE GetMaxLength@1100084009() : Integer;
    BEGIN
      EXIT(MaxLenght);
    END;

    PROCEDURE GetCurrentTextLine@1100084005() : Text;
    BEGIN
      EXIT(WaldoNAVPadTextBuffer.Textline);
    END;

    PROCEDURE FINDFIRST@1100084004() : Boolean;
    BEGIN
      EXIT(WaldoNAVPadTextBuffer.FINDSET);
    END;

    PROCEDURE COUNT@1100084003() : Integer;
    BEGIN
      EXIT(WaldoNAVPadTextBuffer.COUNT);
    END;

    PROCEDURE NEXT@1100084001() : Integer;
    BEGIN
      EXIT(WaldoNAVPadTextBuffer.NEXT);
    END;

    LOCAL PROCEDURE ParseText@1100084002(VAR Text@1100084000 : Text);
    VAR
      WaldoNAVPadTextParseMeth@1100084001 : Codeunit 82111;
    BEGIN
      WaldoNAVPadTextParseMeth.ParseText(Text,GetMaxLength,WaldoNAVPadTextBuffer);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82111 WaldoNAVPad Text Parse Meth
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ParseText@1100084001(VAR Text@1100084000 : Text;MaxLength@1100084003 : Integer;VAR ResultWaldoNAVPadTextBuffer@1100084002 : Record 82110);
    VAR
      Handled@1100084001 : Boolean;
    BEGIN
      OnBeforeParseText(Text,Handled);
      DoParseText(Text,MaxLength,ResultWaldoNAVPadTextBuffer,Handled);
      OnAfterParseText(Text);
    END;

    LOCAL PROCEDURE DoParseText@1100084003(VAR Text@1100084001 : Text;MaxLength@1100084007 : Integer;VAR ResultWaldoNAVPadTextBuffer@1100084009 : Record 82110;VAR Handled@1100084000 : Boolean);
    VAR
      SystemString@1100084003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      LineArray@1100084004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      SystemIOStringReader@1100084005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringReader";
      Line@1100084006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      LineNo@1100084008 : Integer;
    BEGIN
      IF Handled THEN EXIT;

      SystemString := Text;

      ResultWaldoNAVPadTextBuffer.DELETEALL(FALSE);

      SystemIOStringReader := SystemIOStringReader.StringReader(Text);
      Line := SystemIOStringReader.ReadLine;
      WHILE NOT ISNULL(Line) DO BEGIN
        ProcessLine(LineNo,Line,MaxLength,ResultWaldoNAVPadTextBuffer);

        Line := SystemIOStringReader.ReadLine;
      END;
    END;

    LOCAL PROCEDURE ProcessLine@1100084031(VAR LineNo@1100084006 : Integer;VAR Line@1100084000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";MaxLength@1100084002 : Integer;VAR ResultWaldoNAVPadTextBuffer@1100084007 : Record 82110);
    VAR
      SubString@1100084003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      SpaceIndex@1100084001 : Integer;
      ResultString@1100084004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      WHILE STRLEN(Line) > MaxLength DO BEGIN
        SubString := COPYSTR(Line,1,MaxLength);
        SpaceIndex := SubString.LastIndexOf(' ');
        IF SpaceIndex = -1 THEN
          SpaceIndex := MaxLength;
        ResultString := SubString;
        IF SpaceIndex < SubString.Length THEN BEGIN
          ResultString := SubString.Substring(0,SpaceIndex);
          AddToBuffer(LineNo,ResultString,ResultWaldoNAVPadTextBuffer.Separator::" ", ResultWaldoNAVPadTextBuffer);
        END ELSE BEGIN
          AddToBuffer(LineNo,ResultString,ResultWaldoNAVPadTextBuffer.Separator::Space, ResultWaldoNAVPadTextBuffer);
        END;

        Line := Line.Remove(0,ResultString.Length);
      END;

      AddToBuffer(LineNo,Line,ResultWaldoNAVPadTextBuffer.Separator::"Carriage Return",ResultWaldoNAVPadTextBuffer);
    END;

    LOCAL PROCEDURE AddToBuffer@1100084041(VAR LineNo@1100084003 : Integer;VAR Line@1100084000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";pSeparator@1100084002 : Integer;VAR ResultWaldoNAVPadTextBuffer@1100084004 : Record 82110);
    BEGIN
      LineNo += 1;

      WITH ResultWaldoNAVPadTextBuffer DO BEGIN
        INIT;
        "Line No." := LineNo;
        Textline := Line;
        Separator := pSeparator;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE "--- Event Wrapper"@1100084011();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeParseText@1100084004(VAR Text@1100084000 : Text;VAR Handled@1100084001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterParseText@1100084005(VAR Text@1100084000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82112 WaldoNAVPad Showdialog Meth
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=16:55:57;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ShowDialog@1100084001(VAR Text@1100084001 : Text;VAR HTML@1100084004 : Text;VAR DialogResultTrue@1000 : Boolean;Editable@1100084002 : Boolean;UseHTMLEditor@1100084003 : Boolean);
    VAR
      Handled@1100084000 : Boolean;
    BEGIN
      OnBeforeShowDialog(Text,HTML,Editable,UseHTMLEditor,Handled);
      DoShowDialog(Text,HTML,DialogResultTrue,Editable,UseHTMLEditor,Handled);
      OnAfterShowDialog(Text,HTML,Editable,UseHTMLEditor);
    END;

    LOCAL PROCEDURE DoShowDialog@1100084002(VAR Text@1100084001 : Text;VAR HTML@1100084004 : Text;VAR DialogResultTrue@1000 : Boolean;Editable@1100084002 : Boolean;UseHTMLEditor@1100084003 : Boolean;VAR Handled@1100084000 : Boolean);
    BEGIN
      IF Handled THEN
        EXIT;

      IF UseHTMLEditor THEN
        ShowTextOnPageHTML(Text,HTML,DialogResultTrue,Editable)
      ELSE
        ShowTextOnPage(Text,HTML,DialogResultTrue,Editable);
    END;

    LOCAL PROCEDURE ShowTextOnPage@1100084008(VAR Text@1100084000 : Text;VAR HTML@1001 : Text;VAR DialogResultTrue@1000 : Boolean;Editable@1100084001 : Boolean);
    VAR
      WaldoNAVPad@1100084002 : Page 82100;
    BEGIN
      WaldoNAVPad.SetText(Text);
      WaldoNAVPad.LOOKUPMODE := TRUE;
      WaldoNAVPad.EDITABLE := Editable;

      IF WaldoNAVPad.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := WaldoNAVPad.GetText;
        HTML := Text;

        DialogResultTrue := TRUE;
      END;
    END;

    LOCAL PROCEDURE ShowTextOnPageHTML@1100084000(VAR Text@1100084000 : Text;VAR HTML@1100084003 : Text;VAR DialogResultTrue@1000 : Boolean;Editable@1100084001 : Boolean);
    VAR
      WaldoNAVPadHTML@1100084002 : Page 82101;
    BEGIN
      WaldoNAVPadHTML.SetText(Text,HTML);
      WaldoNAVPadHTML.LOOKUPMODE := FALSE;
      WaldoNAVPadHTML.EDITABLE := Editable;

      WaldoNAVPadHTML.RUNMODAL;
      IF WaldoNAVPadHTML.GetDialogResultOK THEN BEGIN
        Text := WaldoNAVPadHTML.GetLastSavedText;
        HTML := WaldoNAVPadHTML.GetLastSavedHTML;

        DialogResultTrue := TRUE;
      END;
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeShowDialog@1100084004(VAR Text@1100084001 : Text;VAR HTML@1100084004 : Text;Editable@1100084002 : Boolean;UseHTMLEditor@1100084003 : Boolean;VAR Handled@1100084000 : Boolean);
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterShowDialog@1100084005(VAR Text@1100084000 : Text;VAR HTML@1100084003 : Text;Editable@1100084001 : Boolean;UseHTMLEditor@1100084002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 82120 WaldoNAVPad Test
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=14:58:51;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [Test]
    [HandlerFunctions(DialogHandlerChangeToWaldo)]
    PROCEDURE TestShowDialogChange@1100084001();
    VAR
      MyText@1100084001 : Text;
      WaldoNAVPadTextClass@1000 : Codeunit 82110;
    BEGIN
      MyText := 'TestText';

      WaldoNAVPadTextClass.Initialize(MyText,100);
      WaldoNAVPadTextClass.LoadTextFromDialog(TRUE,FALSE);

      MyText := WaldoNAVPadTextClass.GetText;

      IF MyText <> 'waldo' THEN ERROR('Text Should have changed to waldo');
    END;

    [Test]
    [HandlerFunctions(DialogHandlerCancel)]
    PROCEDURE TestShowDialogCancel@1100084007();
    VAR
      WaldoNAVPadTextClass@1000 : Codeunit 82110;
      MyText@1100084001 : Text;
    BEGIN
      MyText := 'TestText';

      WaldoNAVPadTextClass.Initialize(MyText,100);
      WaldoNAVPadTextClass.LoadTextFromDialog(TRUE,FALSE);

      MyText := WaldoNAVPadTextClass.GetText;

      IF MyText <> 'TestText' THEN ERROR('Text should not have changed!');
    END;

    [ModalPageHandler]
    PROCEDURE DialogHandlerChangeToWaldo@1100084003(VAR WaldoNAVPad@1100084000 : TestPage 82100);
    BEGIN
      WaldoNAVPad.FullText.VALUE := 'waldo';
      WaldoNAVPad.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DialogHandlerCancel@1100084006(VAR WaldoNAVPad@1100084002 : TestPage 82100);
    VAR
      Response@1100084001 : Action;
    BEGIN
      WaldoNAVPad.FullText.VALUE := 'waldo';
      WaldoNAVPad.Cancel.INVOKE;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 22 Customer List
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=11:35:45;
    Modified=Yes;
    Version List=NAVW110.0,WaldoNAVPad;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=Customer List;
    SourceTable=Table18;
    PageType=List;
    CardPageID=Customer Card;
    PromotedActionCategoriesML=ENU=New,Process,Report,Approve,New Document,Request Approval;
    OnInit=BEGIN
             SetCustomerNoVisibilityOnFactBoxes;
           END;

    OnOpenPage=VAR
                 CRMIntegrationManagement@1000 : Codeunit 5330;
               BEGIN
                 CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;

                 SetWorkflowManagementEnabledState;
               END;

    OnAfterGetRecord=BEGIN
                       SetSocialListeningFactboxVisibility;
                     END;

    OnAfterGetCurrRecord=VAR
                           CRMCouplingManagement@1001 : Codeunit 5331;
                         BEGIN
                           SetSocialListeningFactboxVisibility;

                           CRMIsCoupledToRecord :=
                             CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID) AND CRMIntegrationEnabled;
                           OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);

                           CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 16      ;1   ;ActionGroup;
                      CaptionML=ENU=&Customer;
                      Image=Customer }
      { 20      ;2   ;Action    ;
                      CaptionML=ENU=Co&mments;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Customer),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 66      ;2   ;ActionGroup;
                      CaptionML=ENU=Dimensions;
                      Image=Dimensions }
      { 84      ;3   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions-Single;
                      ToolTipML=ENU=View or edit the single set of dimensions that are set up for the selected record.;
                      ApplicationArea=#Suite;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(18),
                                  No.=FIELD(No.);
                      Image=Dimensions }
      { 42      ;3   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      CaptionML=ENU=Dimensions-&Multiple;
                      ToolTipML=ENU=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyze historical information.;
                      ApplicationArea=#Suite;
                      Image=DimensionSets;
                      OnAction=VAR
                                 Cust@1001 : Record 18;
                                 DefaultDimMultiple@1002 : Page 542;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Cust);
                                 DefaultDimMultiple.SetMultiCust(Cust);
                                 DefaultDimMultiple.RUNMODAL;
                               END;
                                }
      { 58      ;2   ;Action    ;
                      CaptionML=ENU=Bank Accounts;
                      ToolTipML=ENU=View or set up the customer's bank accounts. You can set up any number of bank accounts for each customer.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 424;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=BankAccount }
      { 29      ;2   ;Action    ;
                      CaptionML=ENU=Direct Debit Mandates;
                      ToolTipML=ENU=View the direct-debit mandates that reflect agreements with customers to collect invoice payments from their bank account.;
                      ApplicationArea=#Suite;
                      RunObject=Page 1230;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=MakeAgreement }
      { 23      ;2   ;Action    ;
                      Name=ShipToAddresses;
                      CaptionML=ENU=Ship-&to Addresses;
                      ToolTipML=ENU=View or edit alternate shipping addresses where the customer wants items delivered if different from the regular address.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 301;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ShipAddress }
      { 60      ;2   ;Action    ;
                      AccessByPermission=TableData 5050=R;
                      CaptionML=ENU=C&ontact;
                      ToolTipML=ENU=View or edit detailed information about the contact person at the customer.;
                      ApplicationArea=#Basic,#Suite;
                      Image=ContactPerson;
                      OnAction=BEGIN
                                 ShowContact;
                               END;
                                }
      { 45      ;2   ;Action    ;
                      CaptionML=ENU=Cross Re&ferences;
                      ToolTipML=ENU=Set up the customer's own identification of items that you sell to the customer. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 5723;
                      RunPageView=SORTING(Cross-Reference Type,Cross-Reference Type No.);
                      RunPageLink=Cross-Reference Type=CONST(Customer),
                                  Cross-Reference Type No.=FIELD(No.);
                      Image=Change }
      { 64      ;2   ;Action    ;
                      Name=OnlineMap;
                      CaptionML=ENU=Online Map;
                      ToolTipML=ENU=View the address on an online map.;
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=FALSE;
                      PromotedIsBig=Yes;
                      Image=Map;
                      PromotedCategory=Category5;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=ApprovalEntries;
                      AccessByPermission=TableData 454=R;
                      CaptionML=ENU=Approvals;
                      ToolTipML=ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                      ApplicationArea=#Suite;
                      Image=Approvals;
                      OnAction=BEGIN
                                 ApprovalsMgmt.OpenApprovalEntriesPage(RECORDID);
                               END;
                                }
      { 44      ;1   ;ActionGroup;
                      Name=ActionGroupCRM;
                      CaptionML=ENU=Dynamics CRM;
                      Visible=CRMIntegrationEnabled }
      { 41      ;2   ;Action    ;
                      Name=CRMGotoAccount;
                      CaptionML=ENU=Account;
                      ToolTipML=ENU=Open the coupled Microsoft Dynamics CRM account.;
                      ApplicationArea=#All;
                      Image=CoupledCustomer;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ShowCRMEntityFromRecordID(RECORDID);
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=CRMSynchronizeNow;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=ENU=Synchronize Now;
                      ToolTipML=ENU=Send or get updated data to or from Microsoft Dynamics CRM.;
                      ApplicationArea=#All;
                      Image=Refresh;
                      OnAction=VAR
                                 Customer@1000 : Record 18;
                                 CRMIntegrationManagement@1001 : Codeunit 5330;
                                 CustomerRecordRef@1003 : RecordRef;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 Customer.NEXT;

                                 IF Customer.COUNT = 1 THEN
                                   CRMIntegrationManagement.UpdateOneNow(Customer.RECORDID)
                                 ELSE BEGIN
                                   CustomerRecordRef.GETTABLE(Customer);
                                   CRMIntegrationManagement.UpdateMultipleNow(CustomerRecordRef);
                                 END
                               END;
                                }
      { 97      ;2   ;Action    ;
                      Name=UpdateStatisticsInCRM;
                      CaptionML=ENU=Update Account Statistics;
                      ToolTipML=ENU=Send customer statistics data to Dynamics CRM to update the Account Statistics FactBox.;
                      ApplicationArea=#All;
                      Enabled=CRMIsCoupledToRecord;
                      Image=UpdateXML;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.CreateOrUpdateCRMAccountStatistics(Rec);
                               END;
                                }
      { 31      ;2   ;ActionGroup;
                      Name=Coupling;
                      CaptionML=[@@@=Coupling is a noun;
                                 ENU=Coupling];
                      ToolTipML=ENU=Create, change, or delete a coupling between the Microsoft Dynamics NAV record and a Microsoft Dynamics CRM record.;
                      Image=LinkAccount }
      { 49      ;3   ;Action    ;
                      Name=ManageCRMCoupling;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=ENU=Set Up Coupling;
                      ToolTipML=ENU=Create or modify the coupling to a Microsoft Dynamics CRM account.;
                      ApplicationArea=#All;
                      Image=LinkAccount;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.DefineCoupling(RECORDID);
                               END;
                                }
      { 47      ;3   ;Action    ;
                      Name=DeleteCRMCoupling;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=ENU=Delete Coupling;
                      ToolTipML=ENU=Delete the coupling to a Microsoft Dynamics CRM account.;
                      ApplicationArea=#All;
                      Enabled=CRMIsCoupledToRecord;
                      Image=UnLinkAccount;
                      OnAction=VAR
                                 CRMCouplingManagement@1000 : Codeunit 5331;
                               BEGIN
                                 CRMCouplingManagement.RemoveCoupling(RECORDID);
                               END;
                                }
      { 53      ;2   ;ActionGroup;
                      Name=Create;
                      CaptionML=ENU=Create;
                      Image=NewCustomer }
      { 57      ;3   ;Action    ;
                      Name=CreateInCRM;
                      CaptionML=ENU=Create Account in Dynamics CRM;
                      ToolTipML=ENU=Generate the account in the coupled Microsoft Dynamics CRM account.;
                      ApplicationArea=#All;
                      Image=NewCustomer;
                      OnAction=VAR
                                 Customer@1001 : Record 18;
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                                 CustomerRecordRef@1002 : RecordRef;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 Customer.NEXT;

                                 IF Customer.COUNT = 1 THEN
                                   CRMIntegrationManagement.CreateNewRecordInCRM(RECORDID,FALSE)
                                 ELSE BEGIN
                                   CustomerRecordRef.GETTABLE(Customer);
                                   CRMIntegrationManagement.CreateNewRecordsInCRM(CustomerRecordRef);
                                 END
                               END;
                                }
      { 17      ;3   ;Action    ;
                      Name=CreateFromCRM;
                      CaptionML=ENU=Create Customer in Dynamics NAV;
                      ToolTipML=ENU=Generate the customer in the coupled Microsoft Dynamics CRM account.;
                      ApplicationArea=#All;
                      Image=NewCustomer;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ManageCreateNewRecordFromCRM(DATABASE::Customer);
                               END;
                                }
      { 9       ;1   ;ActionGroup;
                      CaptionML=ENU=History;
                      Image=History }
      { 22      ;2   ;Action    ;
                      Name=CustomerLedgerEntries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Ledger E&ntries;
                      ToolTipML=ENU=View the history of transactions that have been posted for the selected record.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.)
                                  ORDER(Descending);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CustomerLedger }
      { 18      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=ENU=Statistics;
                      RunObject=Page 151;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 21      ;2   ;Action    ;
                      CaptionML=ENU=S&ales;
                      RunObject=Page 155;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=Sales }
      { 19      ;2   ;Action    ;
                      CaptionML=ENU=Entry Statistics;
                      RunObject=Page 302;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EntryStatistics }
      { 63      ;2   ;Action    ;
                      CaptionML=ENU=Statistics by C&urrencies;
                      RunObject=Page 486;
                      RunPageLink=Customer Filter=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter),
                                  Date Filter=FIELD(Date Filter);
                      Image=Currencies }
      { 6500    ;2   ;Action    ;
                      CaptionML=ENU=Item &Tracking Entries;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingDocMgt@1001 : Codeunit 6503;
                               BEGIN
                                 ItemTrackingDocMgt.ShowItemTrackingForMasterData(1,"No.",'','','','','');
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      CaptionML=ENU=S&ales;
                      Image=Sales }
      { 25      ;2   ;Action    ;
                      Name=Sales_InvoiceDiscounts;
                      CaptionML=ENU=Invoice &Discounts;
                      ToolTipML=ENU=Set up different discounts that are applied to invoices for the customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount }
      { 26      ;2   ;Action    ;
                      Name=Sales_Prices;
                      CaptionML=ENU=Prices;
                      ToolTipML=ENU=View or set up different prices for items that you sell to the customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price }
      { 71      ;2   ;Action    ;
                      Name=Sales_LineDiscounts;
                      CaptionML=ENU=Line Discounts;
                      ToolTipML=ENU=Set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount }
      { 82      ;2   ;Action    ;
                      CaptionML=ENU=Prepa&yment Percentages;
                      RunObject=Page 664;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=PrepaymentPercentages }
      { 75      ;2   ;Action    ;
                      CaptionML=ENU=S&td. Cust. Sales Codes;
                      RunObject=Page 173;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CodesList }
      { 11      ;1   ;ActionGroup;
                      CaptionML=ENU=Documents;
                      Image=Documents }
      { 27      ;2   ;Action    ;
                      CaptionML=ENU=Quotes;
                      RunObject=Page 9300;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=Quote }
      { 28      ;2   ;Action    ;
                      CaptionML=ENU=Orders;
                      RunObject=Page 9305;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=Document }
      { 70      ;2   ;Action    ;
                      CaptionML=ENU=Return Orders;
                      RunObject=Page 9304;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=ReturnOrder }
      { 76      ;2   ;ActionGroup;
                      CaptionML=ENU=Issued Documents;
                      Image=Documents }
      { 77      ;3   ;Action    ;
                      CaptionML=ENU=Issued &Reminders;
                      RunObject=Page 440;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=OrderReminder }
      { 78      ;3   ;Action    ;
                      CaptionML=ENU=Issued &Finance Charge Memos;
                      RunObject=Page 452;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo }
      { 65      ;2   ;Action    ;
                      CaptionML=ENU=Blanket Orders;
                      RunObject=Page 9303;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder }
      { 14      ;1   ;ActionGroup;
                      CaptionML=ENU=Service;
                      Image=ServiceItem }
      { 81      ;2   ;Action    ;
                      CaptionML=ENU=Service Orders;
                      RunObject=Page 9318;
                      RunPageView=SORTING(Document Type,Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document }
      { 68      ;2   ;Action    ;
                      CaptionML=ENU=Ser&vice Contracts;
                      RunObject=Page 6065;
                      RunPageView=SORTING(Customer No.,Ship-to Code);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceAgreement }
      { 69      ;2   ;Action    ;
                      CaptionML=ENU=Service &Items;
                      RunObject=Page 5988;
                      RunPageView=SORTING(Customer No.,Ship-to Code,Item No.,Serial No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceItem }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1902575205;1 ;Action    ;
                      Name=NewSalesBlanketOrder;
                      CaptionML=ENU=Blanket Sales Order;
                      RunObject=Page 507;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder;
                      RunPageMode=Create }
      { 1900246505;1 ;Action    ;
                      Name=NewSalesQuote;
                      CaptionML=ENU=Sales Quote;
                      ToolTipML=ENU=Create a new sales quote where you offer items or services to a customer.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 41;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=NewSalesQuote;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1906384905;1 ;Action    ;
                      Name=NewSalesInvoice;
                      CaptionML=ENU=Sales Invoice;
                      ToolTipML=ENU=Create a sales invoice for the customer.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 43;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=NewSalesInvoice;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1904747105;1 ;Action    ;
                      Name=NewSalesOrder;
                      CaptionML=ENU=Sales Order;
                      ToolTipML=ENU=Create a sales order for the customer.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 42;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1902583505;1 ;Action    ;
                      Name=NewSalesCrMemo;
                      CaptionML=ENU=Sales Credit Memo;
                      ToolTipML=ENU=Create a new sales credit memo to revert a posted sales invoice.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 44;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1905163705;1 ;Action    ;
                      Name=NewSalesReturnOrder;
                      CaptionML=ENU=Sales Return Order;
                      RunObject=Page 6630;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=ReturnOrder;
                      RunPageMode=Create }
      { 1905185205;1 ;Action    ;
                      Name=NewServiceQuote;
                      CaptionML=ENU=Service Quote;
                      RunObject=Page 5964;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Quote;
                      RunPageMode=Create }
      { 1902079405;1 ;Action    ;
                      Name=NewServiceInvoice;
                      CaptionML=ENU=Service Invoice;
                      RunObject=Page 5933;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Invoice;
                      RunPageMode=Create }
      { 1907102005;1 ;Action    ;
                      Name=NewServiceOrder;
                      CaptionML=ENU=Service Order;
                      RunObject=Page 5900;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document;
                      RunPageMode=Create }
      { 1901662105;1 ;Action    ;
                      Name=NewServiceCrMemo;
                      CaptionML=ENU=Service Credit Memo;
                      RunObject=Page 5935;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CreditMemo;
                      RunPageMode=Create }
      { 1903839805;1 ;Action    ;
                      Name=NewReminder;
                      CaptionML=ENU=Reminder;
                      RunObject=Page 434;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Reminder;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1901102005;1 ;Action    ;
                      Name=NewFinChargeMemo;
                      CaptionML=ENU=Finance Charge Memo;
                      RunObject=Page 446;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 104     ;1   ;ActionGroup;
                      CaptionML=ENU=History;
                      Image=History }
      { 103     ;2   ;Action    ;
                      Name=CustomerLedgerEntriesHistory;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=Ledger E&ntries;
                      ToolTipML=ENU=View the history of transactions that have been posted for the selected record.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CustomerLedger;
                      Scope=Repeater }
      { 102     ;1   ;ActionGroup;
                      Name=PricesAndDiscounts;
                      CaptionML=ENU=Prices and Discounts }
      { 101     ;2   ;Action    ;
                      Name=Prices_InvoiceDiscounts;
                      CaptionML=ENU=Invoice &Discounts;
                      ToolTipML=ENU=Set up different discounts applied to invoices for the selected customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount;
                      Scope=Repeater }
      { 100     ;2   ;Action    ;
                      Name=Prices_Prices;
                      CaptionML=ENU=Prices;
                      ToolTipML=ENU=View or set up different prices for items that you sell to the selected customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price;
                      Scope=Repeater }
      { 98      ;2   ;Action    ;
                      Name=Prices_LineDiscounts;
                      CaptionML=ENU=Line Discounts;
                      ToolTipML=ENU=Set up different discounts for items that you sell to the selected customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount;
                      Scope=Repeater }
      { 96      ;1   ;ActionGroup;
                      Name=Reports;
                      CaptionML=ENU=Reports }
      { 95      ;2   ;ActionGroup;
                      Name=SalesReports;
                      CaptionML=ENU=Sales Reports;
                      Image=Report }
      { 94      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Top 10 List;
                      ToolTipML=ENU=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 111;
                      Image=Report }
      { 93      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Sales List;
                      ToolTipML=ENU=View customer sales in a period, for example, to report sales activity to customs and tax authorities.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 119;
                      Image=Report }
      { 92      ;3   ;Action    ;
                      CaptionML=ENU=Sales Statistics;
                      ToolTipML=ENU=View customers' total costs, sales, and profits over time, for example, to analyze earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 112;
                      Image=Report }
      { 91      ;2   ;ActionGroup;
                      Name=FinanceReports;
                      CaptionML=ENU=Finance Reports;
                      Image=Report }
      { 90      ;3   ;Action    ;
                      CaptionML=ENU=Statement;
                      ToolTipML=ENU=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an aging band.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 8810;
                      Image=Report }
      { 89      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Balance to Date;
                      ToolTipML=ENU=View, print, or save a customer's balance on a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.;
                      RunObject=Report 121;
                      Image=Report }
      { 88      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Trial Balance;
                      ToolTipML=ENU=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.;
                      ApplicationArea=#Suite;
                      RunObject=Report 129;
                      Image=Report }
      { 87      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Detail Trial Bal.;
                      ToolTipML=ENU=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 104;
                      Image=Report }
      { 83      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Summary Aging;
                      ToolTipML=ENU=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                      RunObject=Report 105;
                      Image=Report }
      { 80      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Detailed Aging;
                      ToolTipML=ENU=View, print, or save a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                      RunObject=Report 106;
                      Image=Report }
      { 74      ;3   ;Action    ;
                      CaptionML=ENU=Aged Accounts Receivable;
                      ToolTipML=ENU=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want aging calculated from and the length of the period that each column will contain data for.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 120;
                      Image=Report }
      { 73      ;3   ;Action    ;
                      CaptionML=ENU=Customer - Payment Receipt;
                      ToolTipML=ENU=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.;
                      ApplicationArea=#Suite;
                      RunObject=Report 211;
                      Image=Report }
      { 55      ;1   ;ActionGroup;
                      CaptionML=ENU=Request Approval;
                      Image=SendApprovalRequest }
      { 51      ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=ENU=Send A&pproval Request;
                      ToolTipML=ENU=Send an approval request.;
                      ApplicationArea=#Suite;
                      Enabled=(NOT OpenApprovalEntriesExist) AND EnabledApprovalWorkflowsExist;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsMgmt.OnSendCustomerForApproval(Rec);
                               END;
                                }
      { 39      ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=ENU=Cancel Approval Re&quest;
                      ToolTipML=ENU=Cancel the approval request.;
                      ApplicationArea=#Suite;
                      Enabled=CanCancelApprovalForRecord;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);
                               END;
                                }
      { 85      ;1   ;ActionGroup;
                      CaptionML=ENU=Workflow }
      { 15      ;2   ;Action    ;
                      Name=CreateApprovalWorkflow;
                      CaptionML=ENU=Create Approval Workflow;
                      ToolTipML=ENU=Set up an approval workflow for creating or changing customers, by going through a few pages that will guide you.;
                      ApplicationArea=#Suite;
                      Enabled=NOT EnabledApprovalWorkflowsExist;
                      Image=CreateWorkflow;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Cust. Approval WF Setup Wizard");
                                 SetWorkflowManagementEnabledState;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=ManageApprovalWorkflows;
                      CaptionML=ENU=Manage Approval Workflows;
                      ToolTipML=ENU=View or edit existing approval workflows for creating or changing customers.;
                      ApplicationArea=#Suite;
                      Enabled=EnabledApprovalWorkflowsExist;
                      Image=WorkflowSetup;
                      OnAction=VAR
                                 WorkflowManagement@1000 : Codeunit 1501;
                               BEGIN
                                 WorkflowManagement.NavigateToWorkflows(DATABASE::Customer,EventFilter);
                                 SetWorkflowManagementEnabledState;
                               END;
                                }
      { 1900839804;1 ;Action    ;
                      CaptionML=ENU=Cash Receipt Journal;
                      RunObject=Page 255;
                      Promoted=Yes;
                      Image=CashReceiptJournal;
                      PromotedCategory=Process }
      { 1905171704;1 ;Action    ;
                      CaptionML=ENU=Sales Journal;
                      RunObject=Page 253;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Process }
      { 1100084001;1 ;Action    ;
                      Name=OpenWNPText;
                      CaptionML=ENU=Open WaldoNAVPad Text;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Text;
                      OnAction=VAR
                                 WaldoNAVPadClass@1000 : Codeunit 82100;
                               BEGIN
                                 //Example code to implement the WaldoNAVPad on a Record, using the generic Text tables
                                 WaldoNAVPadClass.Initialize(Rec);
                                 WaldoNAVPadClass.ShowAndSaveTexts(TRUE,FALSE);
                               END;
                                }
      { 1100084000;1 ;Action    ;
                      Name=OpenWNPTextHTML;
                      CaptionML=ENU=Open WaldoNAVPad HTML;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Text;
                      OnAction=VAR
                                 WaldoNAVPadClass@1000 : Codeunit 82100;
                               BEGIN
                                 //Example code to implement the WaldoNAVPad on a Record, using the generic Text tables
                                 WaldoNAVPadClass.Initialize(Rec);
                                 WaldoNAVPadClass.ShowAndSaveTexts(TRUE,TRUE);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 3       ;1   ;ActionGroup;
                      CaptionML=ENU=General }
      { 1905562606;2 ;Action    ;
                      CaptionML=ENU=Customer List;
                      RunObject=Report 101;
                      Image=Report }
      { 1901007206;2 ;Action    ;
                      CaptionML=ENU=Customer Register;
                      RunObject=Report 103;
                      Image=Report }
      { 1907152806;2 ;Action    ;
                      CaptionML=ENU=Customer - Top 10 List;
                      RunObject=Report 111;
                      Image=Report }
      { 5       ;1   ;ActionGroup;
                      CaptionML=ENU=Sales;
                      Image=Sales }
      { 1905727106;2 ;Action    ;
                      CaptionML=ENU=Customer - Order Summary;
                      RunObject=Report 107;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1900172506;2 ;Action    ;
                      CaptionML=ENU=Customer - Order Detail;
                      RunObject=Report 108;
                      Image=Report }
      { 1906073506;2 ;Action    ;
                      CaptionML=ENU=Customer - Sales List;
                      RunObject=Report 119;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1904190506;2 ;Action    ;
                      CaptionML=ENU=Sales Statistics;
                      RunObject=Report 112;
                      Image=Report }
      { 1900760706;2 ;Action    ;
                      CaptionML=ENU=Customer/Item Sales;
                      RunObject=Report 113;
                      Image=Report }
      { 7       ;1   ;ActionGroup;
                      CaptionML=ENU=Finance;
                      Image=Report }
      { 1906871306;2 ;Action    ;
                      CaptionML=ENU=Customer - Detail Trial Bal.;
                      RunObject=Report 104;
                      Image=Report }
      { 1907944606;2 ;Action    ;
                      CaptionML=ENU=Customer - Summary Aging;
                      RunObject=Report 105;
                      Image=Report }
      { 1906813206;2 ;Action    ;
                      CaptionML=ENU=Customer Detailed Aging;
                      RunObject=Report 106;
                      Image=Report }
      { 1055    ;2   ;Action    ;
                      Name=Statement;
                      CaptionML=ENU=Statement;
                      RunObject=Codeunit 8810;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1903839806;2 ;Action    ;
                      CaptionML=ENU=Reminder;
                      RunObject=Report 117;
                      Image=Reminder }
      { 1900711606;2 ;Action    ;
                      CaptionML=ENU=Aged Accounts Receivable;
                      RunObject=Report 120;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1902299006;2 ;Action    ;
                      CaptionML=ENU=Customer - Balance to Date;
                      RunObject=Report 121;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1906359306;2 ;Action    ;
                      CaptionML=ENU=Customer - Trial Balance;
                      RunObject=Report 129;
                      Image=Report }
      { 1904039606;2 ;Action    ;
                      CaptionML=ENU=Customer - Payment Receipt;
                      RunObject=Report 211;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the customer. The field is either filled automatically from a defined number series, or you enter the number manually because you have enabled manual number entry in the number-series setup.;
                ApplicationArea=#All;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's name. This name will appear on all sales documents for the customer. You can enter a maximum of 50 characters, both numbers and letters.;
                ApplicationArea=#All;
                SourceExpr=Name }

    { 40  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for the responsibility center that will administer this customer by default.;
                SourceExpr="Responsibility Center" }

    { 43  ;2   ;Field     ;
                ToolTipML=ENU=Specifies from which location sales to this customer will be processed by default.;
                SourceExpr="Location Code" }

    { 54  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the postal code.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Post Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the country/region of the address.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Country/Region Code";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's telephone number.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Phone No." }

    { 79  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's IC partner code, if the customer is one of your intercompany partners.;
                SourceExpr="IC Partner Code";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the name of the person you regularly contact when you do business with this customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Contact }

    { 36  ;2   ;Field     ;
                ToolTipML=ENU=Specifies a code for the salesperson who normally handles this customer's account.;
                ApplicationArea=#Suite;
                SourceExpr="Salesperson Code";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's market type to link business transactions to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Posting Group";
                Visible=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's trade type to link transactions made for this customer with the appropriate general ledger account according to the general posting setup.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 52  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer's VAT specification to link transactions made for this customer to.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE }

    { 46  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer price group code, which you can use to set up special sales prices in the Sales Prices window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Price Group";
                Visible=FALSE }

    { 72  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the customer discount group code, which you can use as a criterion to set up special discounts in the Sales Line Discounts window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Disc. Group";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=ENU=Specifies a code that indicates the payment terms that you require of the customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Terms Code";
                Visible=FALSE }

    { 61  ;2   ;Field     ;
                ToolTipML=ENU=Specifies how reminders about late payments are handled for this customer.;
                SourceExpr="Reminder Terms Code";
                Visible=FALSE }

    { 48  ;2   ;Field     ;
                ToolTipML=ENU=Specifies finance charges are calculated for the customer.;
                SourceExpr="Fin. Charge Terms Code";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the default currency for the customer.;
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 50  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the language to be used on printouts for this customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Language Code";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=ENU=Specifies an alternate name that you can use to search for a customer when you cannot remember the value in the Name field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Search Name";
                Visible=FALSE }

    { 1102601000;2;Field  ;
                ToolTipML=ENU=Specifies the maximum amount you allow the customer to exceed the payment balance before warnings are issued.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Limit (LCY)";
                Visible=FALSE }

    { 1102601002;2;Field  ;
                ToolTipML=ENU=Specifies which transactions with the customer should be blocked, for example, because the customer is declared insolvent.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Blocked;
                Visible=FALSE }

    { 1102601004;2;Field  ;
                ToolTipML=ENU=Specifies when the customer card was last modified.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1102601006;2;Field  ;
                ToolTipML=ENU=Specifies how to apply payments to entries for this customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Application Method";
                Visible=FALSE }

    { 1102601008;2;Field  ;
                ToolTipML=ENU=Specifies if several orders delivered to the customer can appear on the same sales invoice.;
                SourceExpr="Combine Shipments";
                Visible=FALSE }

    { 1102601010;2;Field  ;
                ToolTipML=ENU=Specifies whether items will never, automatically (Always), or optionally be reserved for this customer. Optional means that you must manually reserve items for this customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Reserve;
                Visible=FALSE }

    { 1102601012;2;Field  ;
                ToolTipML=ENU=Specifies if the customer accepts partial shipment of orders.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipping Advice";
                Visible=FALSE }

    { 1102601014;2;Field  ;
                ToolTipML=ENU=Specifies which shipping company is used when you ship items to the customer.;
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Code";
                Visible=FALSE }

    { 1102601016;2;Field  ;
                ToolTipML=ENU=Specifies a customizable calendar for shipment planning that includes the customer's working days and holidays.;
                SourceExpr="Base Calendar Code";
                Visible=FALSE }

    { 62  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the payment amount that the customer owes for completed sales. This value is also known as the customer's balance.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance (LCY)";
                OnDrillDown=BEGIN
                              OpenCustomerLedgerEntries(FALSE);
                            END;
                             }

    { 59  ;2   ;Field     ;
                ToolTipML=ENU=Specifies payments from the customer that are overdue per today's date.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance Due (LCY)";
                OnDrillDown=BEGIN
                              OpenCustomerLedgerEntries(TRUE);
                            END;
                             }

    { 32  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the total net amount of sales to the customer in LCY.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales (LCY)" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 99  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page5360;
                Visible=CRMIsCoupledToRecord;
                PartType=Page }

    { 35  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Customer),
                            Source No.=FIELD(No.);
                PagePartID=Page875;
                Visible=SocialListeningVisible;
                PartType=Page }

    { 33  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Customer),
                            Source No.=FIELD(No.);
                PagePartID=Page876;
                Visible=SocialListeningSetupVisible;
                PartType=Page;
                UpdatePropagation=Both }

    { 1903720907;1;Part   ;
                Name=SalesHistSelltoFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9080;
                PartType=Page }

    { 1907234507;1;Part   ;
                Name=SalesHistBilltoFactBox;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 1902018507;1;Part   ;
                Name=CustomerStatisticsFactBox;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9082;
                PartType=Page }

    { 1900316107;1;Part   ;
                Name=CustomerDetailsFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9084;
                Visible=FALSE;
                PartType=Page }

    { 1907829707;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9085;
                Visible=FALSE;
                PartType=Page }

    { 1902613707;1;Part   ;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9086;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ApprovalsMgmt@1005 : Codeunit 1535;
      SocialListeningSetupVisible@1000 : Boolean;
      SocialListeningVisible@1001 : Boolean;
      CRMIntegrationEnabled@1003 : Boolean;
      CRMIsCoupledToRecord@1002 : Boolean;
      OpenApprovalEntriesExist@1004 : Boolean;
      CanCancelApprovalForRecord@1006 : Boolean;
      EnabledApprovalWorkflowsExist@1007 : Boolean;
      EventFilter@1008 : Text;

    PROCEDURE GetSelectionFilter@2() : Text;
    VAR
      Cust@1001 : Record 18;
      SelectionFilterManagement@1002 : Codeunit 46;
    BEGIN
      CurrPage.SETSELECTIONFILTER(Cust);
      EXIT(SelectionFilterManagement.GetSelectionFilterForCustomer(Cust));
    END;

    PROCEDURE SetSelection@1(VAR Cust@1000 : Record 18);
    BEGIN
      CurrPage.SETSELECTIONFILTER(Cust);
    END;

    LOCAL PROCEDURE SetSocialListeningFactboxVisibility@3();
    VAR
      SocialListeningMgt@1000 : Codeunit 871;
    BEGIN
      SocialListeningMgt.GetCustFactboxVisibility(Rec,SocialListeningSetupVisible,SocialListeningVisible);
    END;

    LOCAL PROCEDURE SetCustomerNoVisibilityOnFactBoxes@5();
    BEGIN
      CurrPage.SalesHistSelltoFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.SalesHistBilltoFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.CustomerDetailsFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.CustomerStatisticsFactBox.PAGE.SetCustomerNoVisibility(FALSE);
    END;

    LOCAL PROCEDURE SetWorkflowManagementEnabledState@4();
    VAR
      WorkflowManagement@1001 : Codeunit 1501;
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      EventFilter := WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode + '|' +
        WorkflowEventHandling.RunWorkflowOnCustomerChangedCode;

      EnabledApprovalWorkflowsExist := WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,EventFilter);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 50010 Test Text Editor
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=15:21:34;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    ActionList=ACTIONS
    {
      { 1100084003;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100084004;1 ;Action    ;
                      Name=GetHTML;
                      OnAction=BEGIN
                                 //CurrPage.WaldoNAVPad.SendRequest('GetHTML','');
                                 CurrPage.WaldoNAVPad.GetHTML;
                               END;
                                }
      { 1100084002;1 ;Action    ;
                      Name=GetText;
                      OnAction=BEGIN
                                 CurrPage.WaldoNAVPad.GetText;
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=TestSetTexts;
                      OnAction=BEGIN
                                 SetHTML('kut<b>te</b>kop');
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100084000;;Container;
                ContainerType=ContentArea }

    { 1100084001;1;Group  ;
                GroupType=Group }

    { 1100084005;2;Field  ;
                Name=WaldoNAVPad;
                ControlAddIn=[Waldo TinyMCE Control for NAV;PublicKeyToken=0693cb47ed6631b6] }

  }
  CODE
  {

    LOCAL PROCEDURE SetHTML@1100084001(HTML@1100084000 : Text);
    VAR
      DotNetDictionary@1100084001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
    BEGIN
      DotNetDictionary := DotNetDictionary.Dictionary;
      DotNetDictionary.Add('HTML', HTML);

      CurrPage.WaldoNAVPad.SetHTML(HTML);

      MESSAGE(HTML);
      //CurrPage.WaldoNAVPad.
      //CurrPage.WaldoNAVPad.SendRequest('SetHTML', DotNetDictionary);
    END;

    LOCAL PROCEDURE GetHTML@1100084012(VAR pVariant@1100084000 : Variant);
    VAR
      DotNetDictionary@1100084002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      method@1100084001 : Text;
      HTML@1100084003 : Text;
    BEGIN
      ERROR('GetHTML not used anymore');

      DotNetDictionary := pVariant;
      DotNetDictionary.TryGetValue('method',method);
      IF method <> 'GetHTML' THEN ERROR('GetHTML method expected');

      DotNetDictionary.TryGetValue('HTML',HTML);
      MESSAGE(HTML);
    END;

    EVENT WaldoNAVPad@-1100084005::ControlAddInReady@2();
    BEGIN
      SetHTML('<b>waldo</b> has set some <font color="red">HTML</font>');
      //SetHTML('This is just text');
    END;

    EVENT WaldoNAVPad@-1100084005::GetHTMLReady@3(value@1100084000 : Text);
    BEGIN
      MESSAGE(value);
    END;

    EVENT WaldoNAVPad@-1100084005::GetTextReady@4(value@1100084000 : Text);
    BEGIN
      MESSAGE(value);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 56110 WNP Blobs
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    SourceTable=Table82100;
    PageType=List;
  }
  CONTROLS
  {
    { 1100084000;0;Container;
                ContainerType=ContentArea }

    { 1100084001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1100084002;2;Field  ;
                SourceExpr="Entry No." }

    { 1100084003;2;Field  ;
                Name=RecordID;
                SourceExpr=FORMAT("Record ID") }

    { 1100084004;2;Field  ;
                SourceExpr=Blob }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 56111 WNP Texts
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    SourceTable=Table82101;
    PageType=List;
  }
  CONTROLS
  {
    { 1100084000;0;Container;
                ContainerType=ContentArea }

    { 1100084001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1100084002;2;Field  ;
                SourceExpr="Entry No" }

    { 1100084003;2;Field  ;
                Name=RecordID;
                SourceExpr=FORMAT("Record ID") }

    { 1100084004;2;Field  ;
                SourceExpr=Textline }

    { 1100084005;2;Field  ;
                SourceExpr=Separator }

    { 1100084006;2;Field  ;
                SourceExpr=TableNo }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 82100 WaldoNAVPad
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=10:32:16;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    CaptionML=ENU=waldoNAVPad;
    PageType=Card;
    ActionList=ACTIONS
    {
      { 1100084002;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100084003;1 ;Action    ;
                      Name=Blobs;
                      RunObject=Page 56110 }
      { 1100084004;1 ;Action    ;
                      Name=Texts;
                      RunObject=Page 56111 }
      { 1100084006;1 ;Action    ;
                      Name=Test HTML Editor;
                      OnAction=BEGIN
                                 PAGE.RUN(50010);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100084000;;Container;
                ContainerType=ContentArea }

    { 1100084005;1;Group  ;
                GroupType=GridLayout }

    { 1100084001;2;Field  ;
                SourceExpr=FullText;
                MultiLine=Yes }

  }
  CODE
  {
    VAR
      FullText@1100084000 : Text;

    PROCEDURE SetText@1100084000(Value@1100084000 : Text);
    BEGIN
      FullText := Value;
    END;

    PROCEDURE GetText@1100084001() : Text;
    BEGIN
      EXIT(FullText);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 82101 WaldoNAVPad HTML
{
  OBJECT-PROPERTIES
  {
    Date=06/09/16;
    Time=16:54:21;
    Modified=Yes;
    Version List=WaldoNAVPad;
  }
  PROPERTIES
  {
    CaptionML=ENU=waldoNAVPad;
    PageType=Card;
    OnQueryClosePage=BEGIN
                       IF TextHasChanged THEN
                         EXIT(CONFIRM('Warning, there is unsaved text .. do you really want to close?',FALSE));
                     END;

    ActionList=ACTIONS
    {
      { 1100084002;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      Name=Save;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Save;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ActionSave;
                               END;
                                }
      { 5       ;1   ;Action    ;
                      Name=Save & Close;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Save;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ActionSaveAndClose;
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=Cancel;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Delete;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ActionCancel;
                               END;
                                }
      { 1100084003;1 ;Action    ;
                      Name=Blobs;
                      RunObject=Page 56110 }
      { 1100084004;1 ;Action    ;
                      Name=Texts;
                      RunObject=Page 56111 }
      { 1100084006;1 ;Action    ;
                      Name=Test HTML Editor;
                      OnAction=BEGIN
                                 PAGE.RUN(50010);
                               END;
                                }
      { 2       ;1   ;Action    ;
                      Name=ForceInitialize;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Refresh;
                      OnAction=BEGIN
                                 InitializeContent;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100084000;;Container;
                ContainerType=ContentArea }

    { 1100084005;1;Group  ;
                GroupType=GridLayout }

    { 4   ;2   ;Field     ;
                Name=WaldoNAVPad;
                ControlAddIn=[Waldo TinyMCE Control for NAV;PublicKeyToken=0693cb47ed6631b6] }

  }
  CODE
  {
    VAR
      ControlAddInReady@1000 : Boolean;
      TextHasChanged@1001 : Boolean;
      FullText@1100084000 : Text;
      FullHTML@1100084001 : Text;
      WaldoNAVPadTextClass@1100084002 : Codeunit 82110;
      HTMLSaved@1002 : Boolean;
      TextSaved@1003 : Boolean;
      DialogResultOK@1004 : Boolean;
      CloseWhenSaved@1005 : Boolean;

    PROCEDURE SetText@1100084000(VAR Value@1100084000 : Text;VAR HTML@1100084001 : Text);
    BEGIN
      FullText := Value;
      FullHTML := HTML;
    END;

    PROCEDURE GetLastSavedText@7() : Text;
    BEGIN
      EXIT(FullText);
    END;

    PROCEDURE GetLastSavedHTML@6() : Text;
    BEGIN

      EXIT(FullHTML);
    END;

    LOCAL PROCEDURE ActionSave@2();
    BEGIN
      CurrPage.WaldoNAVPad.GetText;
      CurrPage.WaldoNAVPad.GetHTML;
      TextSaved := FALSE;
      HTMLSaved := FALSE;
      CloseWhenSaved := FALSE;
    END;

    LOCAL PROCEDURE ActionSaveAndClose@5();
    BEGIN
      CurrPage.WaldoNAVPad.GetText;
      CurrPage.WaldoNAVPad.GetHTML;
      TextSaved := FALSE;
      HTMLSaved := FALSE;
      CloseWhenSaved := TRUE;
    END;

    LOCAL PROCEDURE ActionCancel@8();
    BEGIN
      DialogResultOK := FALSE;
      TextHasChanged := FALSE;
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE InitializeContent@1();
    BEGIN
      IF NOT ControlAddInReady THEN EXIT;

      CurrPage.WaldoNAVPad.SetHTML(FullHTML);
      TextHasChanged := FALSE;
    END;

    LOCAL PROCEDURE CloseIfAllSaved@10();
    BEGIN
      IF HTMLSaved AND TextSaved THEN BEGIN
        TextHasChanged := FALSE;

        DialogResultOK := TRUE;

        IF CloseWhenSaved THEN
          CurrPage.CLOSE;
      END;
    END;

    PROCEDURE GetDialogResultOK@3() : Boolean;
    BEGIN
      EXIT(DialogResultOK);
    END;

    EVENT WaldoNAVPad@-4::ControlAddInReady@3();
    BEGIN
      ControlAddInReady := TRUE;

      InitializeContent;
    END;

    EVENT WaldoNAVPad@-4::GetHTMLReady@4(value@1000 : Text);
    BEGIN
      FullHTML := value;
      //TextHasChanged := FALSE;
      HTMLSaved := TRUE;

      CloseIfAllSaved;
    END;

    EVENT WaldoNAVPad@-4::GetTextReady@5(value@1000 : Text);
    BEGIN
      FullText := value;
      //TextHasChanged := FALSE;
      TextSaved := TRUE;

      CloseIfAllSaved;
    END;

    EVENT WaldoNAVPad@-4::TextHasChanged@6();
    BEGIN
      TextHasChanged := TRUE;
    END;

    BEGIN
    END.
  }
}

